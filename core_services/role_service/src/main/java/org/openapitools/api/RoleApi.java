/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Role;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-11-04T10:11:51.764806+01:00[Europe/Berlin]")

@Validated
@Api(value = "role", description = "the role API")
public interface RoleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "adds a role", nickname = "addRole", notes = "Adds a role to the system", tags={ "role", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "role created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing role already exists") })
    @RequestMapping(value = "/role",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addRole(@ApiParam(value = "role to add"  )  @Valid @RequestBody Role role) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deletes a role", nickname = "deleteRole", notes = "deletes a role from the system", tags={ "role", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "role deleted"),
        @ApiResponse(code = 400, message = "invalid input, object invalid") })
    @RequestMapping(value = "/role",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteRole(@NotNull @ApiParam(value = "the role id", required = true) @Valid @RequestParam(value = "id", required = true) Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "retrieves role", nickname = "getRole", notes = "get a role", response = Role.class, responseContainer = "List", tags={ "role", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returns the role", response = Role.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "role not existing") })
    @RequestMapping(value = "/role",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Role> getRole(@NotNull @ApiParam(value = "the role id", required = true) @Valid @RequestParam(value = "id", required = true) Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"level\" : 1,  \"typ\" : \"Admin\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updates a role", nickname = "updateRole", notes = "updates a role", tags={ "role", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "role updated"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 404, message = "this role does not exist") })
    @RequestMapping(value = "/role",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateRole(@ApiParam(value = "role to add"  )  @Valid @RequestBody Role role) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
